//多态的实现方法：覆盖，重载和隐藏
//早绑定和晚绑定
//静态多态是早绑定：
class Rect
{
public:
  int calcArea(int width);
  int calcArea(int width,int height);  //互为重载的两个函数
};
int main(void)
{
  Rect rect;
  rect.calcArea(10);
  rect.calcArea(10,20);
  return;
}
//编译阶段指定函数的调用，运行前就确定了函数

//多态是基于：封装和继承
//动态多态是晚绑定：
//不使用虚函数
class Shape
{
public:
  double calcArea()
  { 
    cout<<"clacArea"<<endl;
    return;
  }； 
class Circle:public Shape
{
public:
  Circle(double r);
  double calcArea();
private:
  double m_dR;
};
double Circle::calcArea()   //非内联函数
{
  return 3.14*m_dR*m_dR;
};
//写在类里的方法为内敛函数，类外则为非内联函数；
//内联函数在编译时被嵌入到调用的地方，节省了函数的调用，适用于常调用的小函数；
//编译器能自动决定哪些函数为内敛函数；
class Rect:public Shape
{
public:
  Rect(double width,double height);
  double calcArea();
  private:
  double m_dWidth;
  double m_dHeight;
};
double Rect::calcArea()
{
  return m_dWidth *m_dHeight;
};
int main(void)
{
  Shape *shape1 = new Circle(4.0);
  Shape *shape2 = new Circle(3.0,5.0);
  shape1->calcArea();                        //shape1,shape2调用的都是父类Shape的函数
  shape2->calcArea();                        //打印"clacArea
  ....
  return;
}
//使用虚函数
class Shape
{
public:
  virtual double calcArea()                 //虚函数
  {
    cout<<"calcArea"<<endl;
    return;
  }
};
class Circle:public Shape
{
public:
  Circle(double r);                      //构造函数
  virtual double calcArea();             //子类virtual可省略
private:
  double m_dR;
};
class Rect:public Shape
{
public:
  Rect(double width,double height);
  virtual double calcArea();
private:
  double m_dWidth;
  double m_dHeight;
};
int main(void)
{
  Shape *shape1 = new Circle(4.0);
  Shape *shape2 = new Rect(3.0,5.0);
  shape1->calcArea();
  shape2->calcArea();
  delete shape1;
  delete shape2;
  return;
}   
//得到Circle和Rect的值

